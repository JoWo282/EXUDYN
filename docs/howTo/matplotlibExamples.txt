some notes on use of matplotlib in spyder:

#change to interactive plot window:
%matplotlib auto

#if you want to switch back to "inline", type this:
%matplotlib inline


#====================================
#EXAMPLE for data of Hotint:
import numpy as np
import matplotlib.pyplot as plt

data = np.loadtxt('solution.txt', comments='#', delimiter=',')
plt.plot(data[:,0], data[:,3], 'b-') #plot column 3 over column 0 (time)
plt.show() #use this in VS2017 to open the plot window!

#====================================
#EXAMPLES:
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0, 2, 100)
plt.plot(x, x, label='linear')
plt.title("interactive test")
plt.xlabel("index")
plt.ylabel("ylabel")
plt.legend()
plt.show() #sometimes needed to update plot

#colors, line style and markers:
plt.plot([1,2,3,4,5], [1,2,3,4,10], 'go-') # 'g'reen 'd'ots '-'solid line
	# 'r*--' : ‘red stars with dashed lines’
	# 'ks.' : ‘black squares with dotted line’ (‘k’ stands for black)
	# * 'bD-.' : ‘blue diamonds with dash-dot line’
	# colors: b: blue,g: green,r: red,c: cyan,m: magenta,y: yellow,k: black,w: white
	# markers: point, pixel,circle: .,o   triangles: v^<>  s8*P+xDd
	# line style: ':', '-.', '--', '-'

#loglog/linear plot:
ax = plt.axes(xscale='log', yscale='log')
ax = plt.axes(xscale='linear', yscale='linear')

#grid:
ax=plt.gca() # get current axes
ax.grid() #turn grid on/off
ax.grid(True, 'major', 'both') # possible arguments: {'major', 'minor', 'both'}, {'both', 'x', 'y'}

#set limits (=plot range)
plt.xlim(xmin,xmax)
plt.ylim(ymin,ymax)
ax.xaxis.get_data_interval() #get data interval
ax.yaxis.get_data_interval()
plt.ylim(ax.yaxis.get_data_interval()) #set axes to data interval
ax.autoscale(True) #automatically scale to data==> ax.margins(0.,0.05) works; ax.margins(0) == 100% zoom

#ticks:
import matplotlib.ticker as ticker
ax.yaxis.set_major_locator(ticker.MaxNLocator(8)) #use maximum of 8 ticks on y-axis
ax.minorticks_on() / _off()

#fontsize (scale all font sizes):
plt.rcParams.update({'font.size': 12})

#save figure:
plt.savefig("figure.pdf")
plt.savefig("figure.png")

#use solution data:
lines = np.loadtxt('solution.txt', comments='#', delimiter=',')

#several plot windows at same time:
fig1, ax1 = plt.subplots()
fig2, ax2 = plt.subplots()
ax1.plot(data[:,1], data[:,1+n], plotColorList[iCase], label=legendList[iCase]) #phase plot
ax2.plot(data[:,0], data[:,1], plotColorList[iCase], label=legendList[iCase]) #time-dependent data
ax1.grid(True, 'major', 'both')
ax1.xaxis.set_major_locator(ticker.MaxNLocator(10)) #use maximum of 8 ticks on y-axis
ax1.yaxis.set_major_locator(ticker.MaxNLocator(10)) #use maximum of 8 ticks on y-axis
ax1.set_title("Phase plot")
ax1.set_xlabel("displacement (u)")
ax1.set_ylabel("velocity (v)")
ax1.legend()

ax2.grid(True, 'major', 'both')
ax2.xaxis.set_major_locator(ticker.MaxNLocator(10)) #use maximum of 8 ticks on y-axis
ax2.yaxis.set_major_locator(ticker.MaxNLocator(10)) #use maximum of 8 ticks on y-axis
ax2.set_xlabel("time (t)")
ax2.set_ylabel("displacement (u)")
ax2.legend()
fig1.tight_layout()
fig2.tight_layout()
fig2.show() #bring to front
fig1.show() #bring to front
fig1.savefig("figure_phaseplot"+str(casesList[0])+".pdf")
fig2.savefig("figure_displacement"+str(casesList[0])+".pdf")





