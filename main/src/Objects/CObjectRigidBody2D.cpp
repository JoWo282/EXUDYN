/** ***********************************************************************************************
* @brief        CObjectRigidBody2D implementation
*
* @author       Gerstmayr Johannes
* @date         2019-06-15 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: missing
                
************************************************************************************************ */

#include "Main/CSystemData.h"
#include "Autogenerated/CObjectRigidBody2D.h"


//! Computational function: compute mass matrix
void CObjectRigidBody2D::ComputeMassMatrix(Matrix& massMatrix) const
{
	massMatrix.SetMatrix(nODE2Coordinates, nODE2Coordinates, 
		{ parameters.physicsMass,0.,0., 
		  0.,parameters.physicsMass,0., 
		  0.,0.,parameters.physicsInertia });
}

//! Computational function: compute left-hand-side (LHS) of second order ordinary differential equations (ODE) to "ode2Lhs"
void CObjectRigidBody2D::ComputeODE2LHS(Vector& ode2Lhs) const
{
	ode2Lhs.SetNumberOfItems(nODE2Coordinates);
	ode2Lhs.SetAll(0.);
}

//! Flags to determine, which access (forces, moments, connectors, ...) to object are possible
AccessFunctionType CObjectRigidBody2D::GetAccessFunctionTypes() const
{
	return (AccessFunctionType)((Index)AccessFunctionType::TranslationalVelocity_qt + (Index)AccessFunctionType::AngularVelocity_qt + 
		(Index)AccessFunctionType::DisplacementMassIntegral_q);// +(Index)AccessFunctionType::Rotv1v2v3_q);
}

//! provide Jacobian at localPosition in "value" according to object access
void CObjectRigidBody2D::GetAccessFunctionBody(AccessFunctionType accessType, const Vector3D& localPosition, Matrix& value) const
{
	switch (accessType)
	{
	case AccessFunctionType::TranslationalVelocity_qt:
	{
		//this function relates a 3D translatory velocity to the time derivative of all coordinates: v_trans = Jac*q_dot
		Real phi = GetCNode(0)->GetCurrentCoordinate(2) + GetCNode(0)->GetCoordinateVector(ConfigurationType::Reference)[2];
		//delete: Real phi = ((CNodeODE2*)GetCNode(0))->GetCurrentCoordinate(2);
		Real dAvxdphi = -sin(phi) * localPosition[0] - cos(phi) * localPosition[1];   //d(Av)x/dphi
		Real dAvydphi = cos(phi) * localPosition[0] - sin(phi) * localPosition[1];   //d(Av)x/dphi
		value.SetMatrix(3, 3, { 1.,0.,dAvxdphi, 0.,1.,dAvydphi, 0.,0.,0. }); //a 3D Vector (e.g. 3D ForceVector), acts in the (x,y)-plane on three coordinates (x,y,phi)
		break;
	}
	case AccessFunctionType::AngularVelocity_qt:
	{
		//this function relates a 3D angular velocity to the time derivative of all coordinates: omega = Jac*q_dot
		value.SetMatrix(3, 3, {0.,0.,0., 0.,0.,0., 0.,0.,1.  }); //the 3D torque vector (only z-component) acts on the 3rd coordinate phi_t
		break;
	}
	//NEEDED? very inefficient!
	//case AccessFunctionType::Rotv1v2v3_q: //for triads attached to bodies
	//{
	//	//this function provides derivatives of the rotation matrix w.r.t. all 3 unit vectors (v1=[1,0,0], ...): Jac = [d(A*v1)/dq, d(A*v2)/dq, d(A*v3)/dq ]
	//	Real phi = GetCNode(0)->GetCurrentCoordinate(2) + GetCNode(0)->GetCoordinateVector(ConfigurationType::Reference)[2];

	//	Real s = sin(phi);
	//	Real c = cos(phi);
	//	Vector2D Av1({ -s, c });
	//	Vector2D Av2({ -c, -s });

	//	value.SetMatrix(3, 3*3, { 0.,0.,Av1[0], 0.,0.,Av2[0], 0.,0.,0.,   0.,0.,Av2[1], 0.,0.,Av2[1], 0.,0.,0.,   0.,0.,0., 0.,0.,0., 0.,0.,0. }); //this jacobian includes the 3 H-matrices needed for constraints
	//	break;
	//}
	case AccessFunctionType::DisplacementMassIntegral_q:
	{
		value.SetMatrix(3, 3, { parameters.physicsMass,0.,0., 0.,parameters.physicsMass,0., 0.,0.,0. }); //a 3D Vector (e.g. 3D ForceVector) acts on three coordinates (x,y,phi)
		break;
	}
	default:
		SysError("CObjectRigidBody2D:GetAccessFunctionBody illegal accessType");
	}
}

//! provide according output variable in "value"
void CObjectRigidBody2D::GetOutputVariableBody(OutputVariableType variableType, const Vector3D& localPosition, ConfigurationType configuration, Vector& value) const
{
	switch (variableType)
	{
	case OutputVariableType::Position: value.CopyFrom(GetPosition(localPosition, configuration)); break;
	case OutputVariableType::Displacement:	value.CopyFrom(GetPosition(localPosition, configuration) - GetPosition(localPosition, ConfigurationType::Reference)); break;
	case OutputVariableType::Velocity: value.CopyFrom(GetVelocity(localPosition, configuration)); break;
	case OutputVariableType::Acceleration: value.CopyFrom(GetAcceleration(localPosition, configuration)); break;

	case OutputVariableType::Rotation: value.CopyFrom(Vector1D( GetCNode(0)->GetCoordinateVector(configuration)[2])); break;
	case OutputVariableType::AngularVelocity: value.CopyFrom(GetAngularVelocity(localPosition, configuration)); break;
	case OutputVariableType::AngularAcceleration: value.CopyFrom(GetAngularAcceleration(localPosition, configuration)); break;

	case OutputVariableType::RotationMatrix: {
		Matrix3D rot = GetRotationMatrix(localPosition, configuration);
		value.SetVector(rot.NumberOfColumns()*rot.NumberOfRows(), rot.GetDataPointer()); 
		break;
	}
	default:
		SysError("CObjectRigidBody2D::GetOutputVariableBody failed"); //error should not occur, because types are checked!
	}
}

//  return the (global) position of "localPosition" according to configuration type
Vector3D CObjectRigidBody2D::GetPosition(const Vector3D& localPosition, ConfigurationType configuration) const
{
	return ((CNodeODE2*)GetCNode(0))->GetPosition(configuration) + ((CNodeODE2*)GetCNode(0))->GetRotationMatrix(configuration) *localPosition;
}

//  return the (global) velocity of "localPosition" according to configuration type
Vector3D CObjectRigidBody2D::GetVelocity(const Vector3D& localPosition, ConfigurationType configuration) const
{
	// \dot R + A * \localOmega x \localPosition
	return ((CNodeODE2*)GetCNode(0))->GetVelocity(configuration) +
		((CNodeODE2*)GetCNode(0))->GetRotationMatrix(configuration) *
		((CNodeODE2*)GetCNode(0))->GetAngularVelocityLocal(configuration).CrossProduct(localPosition); //add omega x r
}

//  return the (global) acceleration of "localPosition" according to configuration type
Vector3D CObjectRigidBody2D::GetAcceleration(const Vector3D& localPosition, ConfigurationType configuration) const
{
	// \ddot R + \alpha x (A * \localPosition) + \omega x (\omega x (A * \localPosition))

	//compute local position in global coordinates (=global position of point relative to origin of body coordinate system)
	Vector3D relativePosition = ((CNodeODE2*)GetCNode(0))->GetRotationMatrix(configuration) * localPosition;
	Vector3D omega = ((CNodeODE2*)GetCNode(0))->GetAngularVelocity(configuration);

	//could be done much simpler, but kept like this as this is only used in sensors and output (not time critical)
	return ((CNodeODE2*)GetCNode(0))->GetAcceleration(configuration) +
		((CNodeODE2*)GetCNode(0))->GetAngularAcceleration(configuration).CrossProduct(relativePosition) +
		omega.CrossProduct(omega.CrossProduct(relativePosition));
}

//! return the (global) position of "localPosition" according to configuration type
Vector3D CObjectRigidBody2D::GetDisplacement(const Vector3D& localPosition, ConfigurationType configuration) const
{
	return ((CNodeODE2*)GetCNode(0))->GetPosition(configuration) - ((CNodeODE2*)GetCNode(0))->GetPosition(ConfigurationType::Reference); //this also works for NodePointGround
}

Matrix3D CObjectRigidBody2D::GetRotationMatrix(const Vector3D& localPosition, ConfigurationType configuration) const
{
	return ((CNodeODE2*)GetCNode(0))->GetRotationMatrix(configuration);
}

//! AUTO:  return configuration dependent angular velocity of node; returns always a 3D Vector
Vector3D CObjectRigidBody2D::GetAngularVelocity(const Vector3D& localPosition, ConfigurationType configuration) const
{
	return ((CNodeODE2*)GetCNode(0))->GetAngularVelocity(configuration);
}

//! AUTO:  return configuration dependent angular acceleration of node; returns always a 3D Vector
Vector3D CObjectRigidBody2D::GetAngularAcceleration(const Vector3D& localPosition, ConfigurationType configuration) const
{
	return ((CNodeODE2*)GetCNode(0))->GetAngularAcceleration(configuration);
}

