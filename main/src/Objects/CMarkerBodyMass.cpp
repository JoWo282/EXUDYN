/** ***********************************************************************************************
* @brief        implementation for MarkerBodyMass
*
* @author       Gerstmayr Johannes
* @date         2019-05-02 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: missing
                
************************************************************************************************ */

#include "Main/CSystemData.h"
#include "Autogenerated/CMarkerBodyMass.h"


void CMarkerBodyMass::GetPosition(const CSystemData& cSystemData, Vector3D& position, ConfigurationType configuration) const
{
	position = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumber]))->GetPosition(Vector3D({0., 0., 0.}), configuration);
}

void CMarkerBodyMass::ComputeMarkerData(const CSystemData& cSystemData, bool computeJacobian, MarkerData& markerData) const
{

	if (computeJacobian)
	{
		((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumber]))->
			GetAccessFunctionBody(AccessFunctionType::DisplacementMassIntegral_q, Vector3D({ 0., 0., 0. }), markerData.positionJacobian); //use positionJacobian to keep compatibility with BodyPosition marker
	}
	markerData.velocityAvailable = false;

}

