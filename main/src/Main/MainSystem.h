/** ***********************************************************************************************
* @class        MainSystem
* @brief		MainSystem and ObjectFactory
* @details		Details:
				- handling of CSystem
				- initialization
				- pybind11 interface
				- object factory
*
* @author		Gerstmayr Johannes
* @date			2018-05-17 (generated)
* @pre			...
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See 'LICENSE.txt' for more details.
* @note			Bug reports, support and further information:
* 				- email: johannes.gerstmayr@uibk.ac.at
* 				- weblink: missing
* 				
*
* *** Example code ***
*
************************************************************************************************ */
#pragma once

#include "Main/MainSystemData.h"
#include "Main/MainObjectFactory.h"
//#include "Graphics/VisualizationSystemData.h"
#include "Graphics/VisualizationSystemContainer.h"


//#include "Utilities/BasicFunctions.h"

//!Interface to a CSystem, used in Python
// This class mirrors all functionality accessible in Python
// Additionally, the MainSystem includes the object factory
class MainSystem
{
public: //! objects made public, because Python functions are anyway mostly Autogenerated ==> keep interface simple
	CSystem* cSystem; //!< link to CSystem object; cSystem must always be initialized correctly!
	VisualizationSystem visualizationSystem; //!< link to graphics representation of system

	//add specific Python lists here:
	MainSystemData mainSystemData;
	MainObjectFactory mainObjectFactory;

public:
	//MainSystem() {};

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   MEMBER VARIABLE ACCESS
	CSystem* GetCSystem() { return cSystem; }
	const CSystem* GetCSystem() const { return cSystem; }

	MainSystemData& GetMainSystemData() { return mainSystemData; }
	const MainSystemData& GetMainSystemData() const { return mainSystemData; }

	VisualizationSystem& GetVisualizationSystem() { return visualizationSystem; }
	const VisualizationSystem& GetVisualizationSystem() const { return visualizationSystem; }

	MainObjectFactory& GetMainObjectFactory() { return mainObjectFactory; }

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   SYSTEM FUNCTIONS
	void Reset();
	bool GetFlagSystemIsConsistent() const { return GetCSystem()->IsSystemConsistent(); }
	void SetFlagSystemIsConsistent(bool flag) { GetCSystem()->SetSystemIsConsistent(flag); }

	bool GetFlagSolverSignalJacobianUpdate() const { return GetCSystem()->GetSolverData().signalJacobianUpdate; }
	void SetFlagSolverSignalJacobianUpdate(bool flag) { GetCSystem()->GetSolverData().signalJacobianUpdate = flag; }

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   VISUALIZATION FUNCTIONS

	//! this function links the VisualizationSystem to a render engine, such that the changes in the graphics structure drawn upon updates, etc.
	//  This function is called on creation of a main system and automatically links to renderer
	bool LinkToRenderEngine();
	//! this function releases the VisualizationSystem from the render engine;
	bool DetachRenderEngine();

	//! this function is used to only send a signal that the scene shall be redrawn because the visualization state has been updated
	void SendRedrawSignal() { GetCSystem()->GetPostProcessData()->SendRedrawSignal(); };

	//! interrupt further computation until user input --> 'pause' function
	void WaitForUserToContinue() { GetCSystem()->GetPostProcessData()->WaitForUserToContinue(); }

	//! return the render engine stop flag (e.g. in order to interrupt animation or postprocessing)
	bool GetRenderEngineStopFlag() const { return GetCSystem()->GetPostProcessData()->stopSimulation; }

	//! return the render engine stop flag (e.g. in order to interrupt animation or postprocessing)
	void SetRenderEngineStopFlag(bool stopFlag) { GetCSystem()->GetPostProcessData()->stopSimulation = stopFlag; }

	////! this function waits for the stop flag in the render engine;
	//bool WaitForRenderEngineStopFlag();

	////! access to settings via pybind, not knowing visualization system:
	//const VisualizationSettings& PyGetVisualizationSettings() const { return visualizationSystem.settings; }
	//void PySetVisualizationSettings(const VisualizationSettings& visualizationSettings) { visualizationSystem.settings = visualizationSettings; }


	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   COMPUTATIONAL FUNCTIONS
	void Assemble() 
	{ 
		cSystem->Assemble(*this); 
		//visualizationSystem.UpdateMaximumSceneCoordinates(); //uses reference coordinates to obtain the scene center and its size
	}
	void AssembleCoordinates() { cSystem->AssembleCoordinates(*this); }
	void AssembleLTGLists() { cSystem->AssembleLTGLists(*this); }
	void AssembleInitializeSystemCoordinates() { cSystem->AssembleInitializeSystemCoordinates(*this); }

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   NODES
	//! this is the hook to the object factory, handling all kinds of objects, nodes, ...
	Index AddMainNode(py::dict d);
	//! get node's dictionary by name; does not throw a error message
	Index PyGetNodeNumber(STDstring name);
	//! hook to read node's dictionary
	py::dict PyGetNode(Index nodeNumber);
	//! get node's dictionary by name
	py::dict PyGetNodeByName(STDstring name);
	//! modify node's dictionary
	void PyModifyNode(Index nodeNumber, py::dict nodeDict);
	//! get node's with type 'name' default values, which helps for manual writing of python input
	py::dict PyGetNodeDefaults(STDstring typeName);

	//! GetOutputVariable with type and return value; copies values==>slow!; can be scalar or vector-valued! maps to CNode GetOutputVariable(...)
	virtual py::object PyGetNodeOutputVariable(Index nodeNumber, OutputVariableType variableType, ConfigurationType configuration=ConfigurationType::Current) const;

	//! call pybind node function, possibly with arguments
	py::object PyCallNodeFunction(Index nodeNumber, STDstring functionName, py::dict args);

	//! Get (read) parameter 'parameterName' of 'objectNumber' via pybind / pyhton interface instead of obtaining the whole dictionary with GetDictionary
	virtual py::object PyGetNodeParameter(Index objectNumber, const STDstring& parameterName) const;
	//! Set (write) parameter 'parameterName' of 'objectNumber' to 'value' via pybind / pyhton interface instead of writing the whole dictionary with SetWithDictionary(...)
	virtual void PySetNodeParameter(Index objectNumber, const STDstring& parameterName, const py::object& value);

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   OBJECTS
	//! this is the hook to the object factory, handling all kinds of objects, nodes, ...
	Index AddMainObject(py::dict d);
	//! get object's dictionary by name; does not throw a error message
	Index PyGetObjectNumber(STDstring objectName);
	//! hook to read object's dictionary
	py::dict PyGetObject(Index objectNumber);
	//! get object's dictionary by name
	py::dict PyGetObjectByName(STDstring objectName);
	//! modify object's dictionary
	void PyModifyObject(Index objectNumber, py::dict d);
	//! get object's with type 'typeName' default values, which helps for manual writing of python input
	py::dict PyGetObjectDefaults(STDstring typeName);

	//! call pybind object function, possibly with arguments
	py::object PyCallObjectFunction(Index objectNumber, STDstring functionName, py::dict args);
	//! Get specific output variable with variable type; as this will involve MarkerDataStructure for constraints, this call may be slower than other calls
	py::object PyGetObjectOutputVariable(Index objectNumber, OutputVariableType variableType);
	//! Get specific output variable with variable type; ONLY for bodies;
	py::object PyGetObjectOutputVariableBody(Index objectNumber, OutputVariableType variableType,
		const std::vector<Real>& localPosition, ConfigurationType configuration);

	//! Get (read) parameter 'parameterName' of 'objectNumber' via pybind / pyhton interface instead of obtaining the whole dictionary with GetDictionary
	virtual py::object PyGetObjectParameter(Index objectNumber, const STDstring& parameterName) const;
	//! Set (write) parameter 'parameterName' of 'objectNumber' to 'value' via pybind / pyhton interface instead of writing the whole dictionary with SetWithDictionary(...)
	virtual void PySetObjectParameter(Index objectNumber, const STDstring& parameterName, const py::object& value);



	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   MARKER
	//! this is the hook to the object factory, handling all kinds of objects, nodes, ...
	Index AddMainMarker(py::dict d);
	//! get marker's dictionary by name; does not throw a error message
	Index PyGetMarkerNumber(STDstring objectName);
	//! hook to read marker's dictionary
	py::dict PyGetMarker(Index objectNumber);
	//! get marker's dictionary by name
	py::dict PyGetMarkerByName(STDstring objectName);
	//! modify marker's dictionary
	void PyModifyMarker(Index objectNumber, py::dict d);
	//! get marker's default values, which helps for manual writing of python input
	py::dict PyGetMarkerDefaults(STDstring typeName);

	//! Get (read) parameter 'parameterName' of 'objectNumber' via pybind / pyhton interface instead of obtaining the whole dictionary with GetDictionary
	virtual py::object PyGetMarkerParameter(Index objectNumber, const STDstring& parameterName) const;
	//! Set (write) parameter 'parameterName' of 'objectNumber' to 'value' via pybind / pyhton interface instead of writing the whole dictionary with SetWithDictionary(...)
	virtual void PySetMarkerParameter(Index objectNumber, const STDstring& parameterName, const py::object& value);

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//   LOAD
	//! this is the hook to the object factory, handling all kinds of objects, nodes, ...
	Index AddMainLoad(py::dict d);
	//! get load's dictionary by name; does not throw a error message
	Index PyGetLoadNumber(STDstring objectName);
	//! hook to read load's dictionary
	py::dict PyGetLoad(Index objectNumber);
	//! get load's dictionary by name
	py::dict PyGetLoadByName(STDstring objectName);
	//! modify load's dictionary
	void PyModifyLoad(Index objectNumber, py::dict d);
	//! get load's default values, which helps for manual writing of python input
	py::dict PyGetLoadDefaults(STDstring typeName);

	//! Get (read) parameter 'parameterName' of 'objectNumber' via pybind / pyhton interface instead of obtaining the whole dictionary with GetDictionary
	virtual py::object PyGetLoadParameter(Index objectNumber, const STDstring& parameterName) const;
	//! Set (write) parameter 'parameterName' of 'objectNumber' to 'value' via pybind / pyhton interface instead of writing the whole dictionary with SetWithDictionary(...)
	virtual void PySetLoadParameter(Index objectNumber, const STDstring& parameterName, const py::object& value);
};


