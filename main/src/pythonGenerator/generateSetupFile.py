# -*- coding: utf-8 -*-
"""
Created on Tue Jun 09 23:53:30 2020

@author: Johannes Gerstmayr

goal: generate latex documentation for all utilities packages
"""
#import copy #for deep copies
#from autoGenerateHelper import Str2Latex
import os
from exudynVersion import exudynVersionString

fileDir='../../'
dirsParsed=['src/Autogenerated',
            'src/Graphics',
            'src/Linalg',
            'src/Main',
            'src/Objects',
            'src/Pymodules',
            'src/Solver',
            'src/System',
            'src/Tests',
            'src/Utilities',
             ]

sSetup = '' #string for setup file

sSetup += """
from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext
import sys
import setuptools

#import os
#os.environ["CC"] = "gcc-8" #use gcc-8.4 on linux; does not work on windows
#os.environ["CXX"] = "gcc-8"
"""

sSetup += "__version__ = '" + exudynVersionString + "'\n"

sSetup += """
class get_pybind_include(object):
    def __str__(self):
        import pybind11
        return pybind11.get_include()

"""

sSetup += """
ext_modules = [
    Extension(
        'exudyn',
        # Alternative, but not needed, as .cpp file list is generated automatically: sort input source files to ensure bit-for-bit reproducible builds: sorted([...])
        ["""

#sSetup += "'src/Main/PybindModule.cpp',"
#sSetup += "'src/Main/PyMatrixContainer.cpp',"

for oneDir in dirsParsed:
    currentDir = fileDir+oneDir
    for file in os.listdir(currentDir):
        if file.endswith(".cpp"):
            print("add file: "+oneDir+'/'+file)
            sSetup += "                 '"+ oneDir+'/'+file +"',\n"
        
# 'src/Main/PybindModule.cpp',
# 'src/Linalg/Vector.cpp',
# 'src/Linalg/Matrix.cpp',
# 'src/Main/Stdoutput.cpp',

sSetup += """
		],
        include_dirs=[
            # Path to pybind11 headers
            get_pybind_include(),
    			"src",
    			"include",
    			"include/pybind11",
    			"include/glfw/deps",
    			"include/glfw",
    			"include/lest",
        ],
		define_macros=[('NDEBUG', '1'),
						#('_MBCS', ''),
						#('_WINDLL', ''),
						('_CRT_SECURE_NO_WARNINGS', ''),
		],
        language='c++'
    ),
]
"""


sSetup += """
# cf http://bugs.python.org/issue26689
def has_flag(compiler, flagname):
#    Return a boolean indicating whether a flag name is supported on
#    the specified compiler.
    import tempfile
    import os
    with tempfile.NamedTemporaryFile('w', suffix='.cpp', delete=False) as f:
        f.write('int main (int argc, char **argv) { return 0; }')
        fname = f.name
    try:
        compiler.compile([fname], extra_postargs=[flagname])
    except setuptools.distutils.errors.CompileError:
        return False
    finally:
        try:
            os.remove(fname)
        except OSError:
            pass
    return True


def cpp_flag(compiler):
#    Return the -std=c++[11/14/17] compiler flag.
#    The newer version is prefered over c++11 (when it is available).
    flags = ['-std=c++17', '-std=c++14', '-std=c++11']

    for flag in flags:
        if has_flag(compiler, flag):
            return flag

    raise RuntimeError('Unsupported compiler -- at least C++11 support '
                       'is needed!')


class BuildExt(build_ext):
#    A custom build extension for adding compiler-specific options.
    c_opts = {
        #'msvc': ['/EHsc'],
        'msvc': ['/EHsc',
				'/permissive-',
				'/MP', '/GS', '/Qpar',
				'/GL', '/W3', '/Gy', 
				'/Zc:wchar_t',
				'/Zi', 
				'/Gm-', 
				'/O2', 
				'/sdl',
				'/Zc:inline',
				'/fp:precise',
			   '/D', '_MBCS', 
				'/D', '_WINDLL',
				'/D','_CRT_SECURE_NO_WARNINGS', #/D and _CRT_SECURE_NO_WARNINGS must be consecutive==>WORKS!
				'/Zc:twoPhase-',
				'/errorReport:prompt', 
				'/WX-', 
				'/Zc:forScope',
				'/arch:AVX2',
				'/Gd', '/Oy', '/Oi', '/MD', 
				'/openmp',
				'/std:c++17',
				'/FC'],
        'unix': [
         #'-std=c++17', #==>chosen automatic
         '-Wno-non-template-friend', #deactivate warning for several vector/array templates
         '-Wno-comment', #deactivate multiline comment warning /* ... * * ...*/
         #'-fpermissive', #because of exceptions ==> allows compilation
         #'-fopenmp',
    		 '-Wall',
    		 '-Wno-class-memaccess', #avoid warnings on gcc-8 regarding memory access in class
    		 #'-O3', #takes long ...
    		 #'-shared',
    		 #'-fPIC',

#		#working:
#		'-Wno-non-template-friend', #deactivate warning for several vector/array templates
#		'-Wno-comment', #deactivate multiline comment warning /* ... * * ...*/
#		'-Wall',
#		'-Wno-class-memaccess', #avoid warnings on gcc-8 regarding memory access in class
        ],
    }
    l_opts = {
        'msvc': [],
        'unix': [
			'-lgomp', #for openmp ==> needed for omp_get_num_threads()
    		#for graphics (if GLFW enabled); needs to be installed -> see setupToolsHowTo.txt:
        '-lglfw', #GLFW
    		'-lGL', #OpenGL
			],
    }

    if sys.platform == 'darwin':
        darwin_opts = ['-stdlib=libc++', '-mmacosx-version-min=10.7']
        c_opts['unix'] += darwin_opts
        l_opts['unix'] += darwin_opts

    def build_extensions(self):
        ct = self.compiler.compiler_type
        opts = self.c_opts.get(ct, [])
        link_opts = self.l_opts.get(ct, [])
        if ct == 'unix':
            opts.append(cpp_flag(self.compiler))
            if has_flag(self.compiler, '-fvisibility=hidden'):
                opts.append('-fvisibility=hidden')

        for ext in self.extensions:
            ext.define_macros = [('VERSION_INFO', '"{}"'.format(self.distribution.get_version()))]
            ext.extra_compile_args = opts
            ext.extra_link_args = link_opts
        build_ext.build_extensions(self)


setup(
    name='exudyn',
    version=__version__,
    author='Johannes Gerstmayr',
    author_email='reply.exudyn@gmail.com',
    # url='https://github.com/pybind/python_example',
    description='EXUDYN flexible multibody dynamics simulation in C++ and Python',
    long_description='',
	py_modules=['pythonDev/itemInterface'],
    ext_modules=ext_modules,
    setup_requires=['pybind11>=2.5.0'],
    cmdclass={'build_ext': BuildExt},
    zip_safe=False,
	#packages=['exudyn']
)
"""	


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#write setup.py file:        
outputFile = '..\\..\\setup.py'

file=open(outputFile,'w')  #clear file by one write access
file.write('# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
file.write('# setup.py file for EXUDYN; generated by Johannes Gerstmayr and based on')
file.write('# template provided provided in pybind11')
file.write('# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n')
file.write(sSetup)
file.close()



#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

sCM = """
cmake_minimum_required(VERSION 2.8.12)
project(exudyn)

include_directories(src include include/glfw include/glfw/deps include/lest)
add_subdirectory(pybind11)
"""

sCM += "pybind11_add_module(exudyn"

for oneDir in dirsParsed:
    currentDir = fileDir+oneDir
    for file in os.listdir(currentDir):
        if file.endswith(".cpp"):
            print("add CMakelists file: "+oneDir+'/'+file)
            sCM += " "+ oneDir+'/'+file

sCM += ")\n\n"


#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#write CMakeLists.txt file: 
outputFile = '..\\..\\CMakeLists.txt'
file=open(outputFile,'w')  #clear file by one write access
file.write('# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
file.write('# CMakeLists.txt file for EXUDYN; generated by Johannes Gerstmayr and based on')
file.write('# template provided provided in pybind11')
file.write('# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n')
file.write(sCM)
file.close()
        
        