/** ***********************************************************************************************
* @class        MainMarkerBodyParameters
* @brief        Parameter class for MainMarkerBody
*
* @author       Gerstmayr Johannes
* @date         2018-06-15 (generated)
* @date         2019-07-12 (last modfied)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See 'LICENSE.txt' for more details.
* @note			Bug reports, support and further information:
* 				- email: johannes.gerstmayr@uibk.ac.at
* 				- weblink: missing
************************************************************************************************ */
#pragma once

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CMarkerBody.h"

#include "Autogenerated/VisuMarkerBody.h"

//! AUTO: Parameters for class MainMarkerBodyParameters
class MainMarkerBodyParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainMarkerBody
* @brief        A marker attached to the whole body (mass/volume).
*
* @author       Gerstmayr Johannes
* @date         2018-06-15 (generated)
* @date         2019-07-12 (last modfied)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See 'LICENSE.txt' for more details.
* @note			Bug reports, support and further information:
* 				- email: johannes.gerstmayr@uibk.ac.at
* 				- weblink: missing
************************************************************************************************ */
#pragma once

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"

//! AUTO: MainMarkerBody
class MainMarkerBody: public MainMarker // AUTO: 
{
protected: // AUTO: 
    CMarkerBody* cMarkerBody; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationMarkerBody* visualizationMarkerBody; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CMarkerBody* GetCMarkerBody() { return cMarkerBody; }
    //! AUTO: Get const pointer to computational class
    const CMarkerBody* GetCMarkerBody() const { return cMarkerBody; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCMarkerBody(CMarkerBody* pCMarkerBody) { cMarkerBody = pCMarkerBody; }

    //! AUTO: Get pointer to visualization class
    VisualizationMarkerBody* GetVisualizationMarkerBody() { return visualizationMarkerBody; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationMarkerBody* GetVisualizationMarkerBody() const { return visualizationMarkerBody; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationMarkerBody(VisualizationMarkerBody* pVisualizationMarkerBody) { visualizationMarkerBody = pVisualizationMarkerBody; }

    //! AUTO: Get const pointer to computational base class object
    virtual CMarker* GetCMarker() const { return cMarkerBody; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCMarker(CMarker* pCMarker) { cMarkerBody = (CMarkerBody*)pCMarker; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationMarker* GetVisualizationMarker() const { return visualizationMarkerBody; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationMarker(VisualizationMarker* pVisualizationMarker) { visualizationMarkerBody = (VisualizationMarkerBody*)pVisualizationMarker; }

    //! AUTO:  Get type name of marker (without keyword "Marker"...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "BodyRigid";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d)
    {
        cMarkerBody->GetParameters().bodyNumber = py::cast<Index>(d["bodyNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        HPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (HPyUtils::DictItemExists(d, "Vactive")) { visualizationMarkerBody->GetActive() = py::cast<bool>(d["Vactive"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const
    {
        auto d = py::dict();
        d["markerType"] = (std::string)GetTypeName();
        d["bodyNumber"] = (Index)cMarkerBody->GetParameters().bodyNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vactive"] = (bool)visualizationMarkerBody->GetActive(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }
};


