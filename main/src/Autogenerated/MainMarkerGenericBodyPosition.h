/** ***********************************************************************************************
* @class        MainMarkerGenericBodyPositionParameters
* @brief        Parameter class for MainMarkerGenericBodyPosition
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2020-04-10  01:13:45 (last modfied)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: missing
                
************************************************************************************************ */
#pragma once

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CMarkerGenericBodyPosition.h"

#include "Autogenerated/VisuMarkerGenericBodyPosition.h"

//! AUTO: Parameters for class MainMarkerGenericBodyPositionParameters
class MainMarkerGenericBodyPositionParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainMarkerGenericBodyPosition
* @brief        A position marker attached to a generic, discretized body, such as GenericODE2 or bodies modelled with the floating frame of reference formulation. The nodes of the body must provide position information. For a list of \f$n\f$ local node numbers, referencing to node points \f$\LU{b}{\pv_i}\f$ and weights \f$w_i\f$, the body-fixed marker position \f$\LU{b}{\pv_m}\f$ results in \f$\LU{b}{\pv_m} = \sum_{i=0}^{n-1}w_i \cdot \LU{b}{\pv_i}\f$. If the flag \texttt{useFirstNodeAsReferenceFrame} = \texttt{False}, then it follows that \f$\LU{0}{\pv_m} = \LU{b}{\pv_m}\f$. Otherwise \f$\LU{0}{\pv_m} = \LU{0b}{\Rot} \LU{b}{\pv_m}\f$, in which \f$\LU{0b}{\Rot}\f$ is the rotation matrix provided by the first node of the body, which also must provide orientation information.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: missing
                
************************************************************************************************ */
#pragma once

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"

//! AUTO: MainMarkerGenericBodyPosition
class MainMarkerGenericBodyPosition: public MainMarker // AUTO: 
{
protected: // AUTO: 
    CMarkerGenericBodyPosition* cMarkerGenericBodyPosition; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationMarkerGenericBodyPosition* visualizationMarkerGenericBodyPosition; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainMarkerGenericBodyPosition()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CMarkerGenericBodyPosition* GetCMarkerGenericBodyPosition() { return cMarkerGenericBodyPosition; }
    //! AUTO: Get const pointer to computational class
    const CMarkerGenericBodyPosition* GetCMarkerGenericBodyPosition() const { return cMarkerGenericBodyPosition; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCMarkerGenericBodyPosition(CMarkerGenericBodyPosition* pCMarkerGenericBodyPosition) { cMarkerGenericBodyPosition = pCMarkerGenericBodyPosition; }

    //! AUTO: Get pointer to visualization class
    VisualizationMarkerGenericBodyPosition* GetVisualizationMarkerGenericBodyPosition() { return visualizationMarkerGenericBodyPosition; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationMarkerGenericBodyPosition* GetVisualizationMarkerGenericBodyPosition() const { return visualizationMarkerGenericBodyPosition; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationMarkerGenericBodyPosition(VisualizationMarkerGenericBodyPosition* pVisualizationMarkerGenericBodyPosition) { visualizationMarkerGenericBodyPosition = pVisualizationMarkerGenericBodyPosition; }

    //! AUTO: Get const pointer to computational base class object
    virtual CMarker* GetCMarker() const { return cMarkerGenericBodyPosition; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCMarker(CMarker* pCMarker) { cMarkerGenericBodyPosition = (CMarkerGenericBodyPosition*)pCMarker; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationMarker* GetVisualizationMarker() const { return visualizationMarkerGenericBodyPosition; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationMarker(VisualizationMarker* pVisualizationMarker) { visualizationMarkerGenericBodyPosition = (VisualizationMarkerGenericBodyPosition*)pVisualizationMarker; }

    //! AUTO:  Get type name of marker (without keyword 'Marker'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "GenericBodyPosition";
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cMarkerGenericBodyPosition->GetParameters().bodyNumber = py::cast<Index>(d["bodyNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cMarkerGenericBodyPosition->GetParameters().nodeNumbers = py::cast<std::vector<Index>>(d["nodeNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cMarkerGenericBodyPosition->GetParameters().weightingFactors = py::cast<std::vector<Real>>(d["weightingFactors"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cMarkerGenericBodyPosition->GetParameters().useFirstNodeAsReferenceFrame = py::cast<bool>(d["useFirstNodeAsReferenceFrame"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationMarkerGenericBodyPosition->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VshowMarkerNodes")) { visualizationMarkerGenericBodyPosition->GetShowMarkerNodes() = py::cast<bool>(d["VshowMarkerNodes"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["markerType"] = (std::string)GetTypeName();
        d["bodyNumber"] = (Index)cMarkerGenericBodyPosition->GetParameters().bodyNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumbers"] = (std::vector<Index>)cMarkerGenericBodyPosition->GetParameters().nodeNumbers; //! AUTO: cast variables into python (not needed for standard types) 
        d["weightingFactors"] = (std::vector<Real>)cMarkerGenericBodyPosition->GetParameters().weightingFactors; //! AUTO: cast variables into python (not needed for standard types) 
        d["useFirstNodeAsReferenceFrame"] = (bool)cMarkerGenericBodyPosition->GetParameters().useFirstNodeAsReferenceFrame; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationMarkerGenericBodyPosition->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VshowMarkerNodes"] = (bool)visualizationMarkerGenericBodyPosition->GetShowMarkerNodes(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("bodyNumber") == 0) { return py::cast((Index)cMarkerGenericBodyPosition->GetParameters().bodyNumber);} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { return py::cast((std::vector<Index>)cMarkerGenericBodyPosition->GetParameters().nodeNumbers);} //! AUTO: get parameter
        else if (parameterName.compare("weightingFactors") == 0) { return py::cast((std::vector<Real>)cMarkerGenericBodyPosition->GetParameters().weightingFactors);} //! AUTO: get parameter
        else if (parameterName.compare("useFirstNodeAsReferenceFrame") == 0) { return py::cast((bool)cMarkerGenericBodyPosition->GetParameters().useFirstNodeAsReferenceFrame);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationMarkerGenericBodyPosition->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("VshowMarkerNodes") == 0) { return py::cast((bool)visualizationMarkerGenericBodyPosition->GetShowMarkerNodes());} //! AUTO: get parameter
        else  {PyError(STDstring("MarkerGenericBodyPosition::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("bodyNumber") == 0) { cMarkerGenericBodyPosition->GetParameters().bodyNumber = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { cMarkerGenericBodyPosition->GetParameters().nodeNumbers = py::cast<std::vector<Index>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("weightingFactors") == 0) { cMarkerGenericBodyPosition->GetParameters().weightingFactors = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("useFirstNodeAsReferenceFrame") == 0) { cMarkerGenericBodyPosition->GetParameters().useFirstNodeAsReferenceFrame = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationMarkerGenericBodyPosition->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VshowMarkerNodes") == 0) { visualizationMarkerGenericBodyPosition->GetShowMarkerNodes() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("MarkerGenericBodyPosition::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};


