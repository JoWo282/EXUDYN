/** ***********************************************************************************************
* @class        MainObjectJointSliding2DNewParameters
* @brief        Parameter class for MainObjectJointSliding2DNew
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2019-08-27 (last modfied)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: missing
                
************************************************************************************************ */
#pragma once

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectJointSliding2DNew.h"

#include "Autogenerated/VisuObjectJointSliding2DNew.h"

//! AUTO: Parameters for class MainObjectJointSliding2DNewParameters
class MainObjectJointSliding2DNewParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectJointSliding2DNew
* @brief        A specialized sliding joint (without rotation) in 2D between a Cable2D (marker1) and a position-based marker (marker0); the ODE2 node coordinate  \f$q_{ODE2}[0]\f$ is the sliding coordinate, which is the total sliding length along all cable elements in the cableMarkerNumber list; the data coordinate [0] provides the current index in slidingMarkerNumbers; the algebraic variables are \f[ \qv_{AE}=[\lambda_x\;\; \lambda_y]^T \f] in which \f$\lambda_x\f$ and \f$\lambda_y\f$ are the Lagrange multipliers for the position of the sliding joint; the data coordinate is \f[ \qv_{Data} = [i_{marker}]^T \f] in which \f$i_{marker}\f$ is the current local index to the slidingMarkerNumber list.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2019-08-27 (last modfied)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: missing
                
************************************************************************************************ */
#pragma once

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"

//! AUTO: MainObjectJointSliding2DNew
class MainObjectJointSliding2DNew: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectJointSliding2DNew* cObjectJointSliding2DNew; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectJointSliding2DNew* visualizationObjectJointSliding2DNew; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectJointSliding2DNew()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectJointSliding2DNew* GetCObjectJointSliding2DNew() { return cObjectJointSliding2DNew; }
    //! AUTO: Get const pointer to computational class
    const CObjectJointSliding2DNew* GetCObjectJointSliding2DNew() const { return cObjectJointSliding2DNew; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectJointSliding2DNew(CObjectJointSliding2DNew* pCObjectJointSliding2DNew) { cObjectJointSliding2DNew = pCObjectJointSliding2DNew; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectJointSliding2DNew* GetVisualizationObjectJointSliding2DNew() { return visualizationObjectJointSliding2DNew; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectJointSliding2DNew* GetVisualizationObjectJointSliding2DNew() const { return visualizationObjectJointSliding2DNew; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectJointSliding2DNew(VisualizationObjectJointSliding2DNew* pVisualizationObjectJointSliding2DNew) { visualizationObjectJointSliding2DNew = pVisualizationObjectJointSliding2DNew; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectJointSliding2DNew; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectJointSliding2DNew = (CObjectJointSliding2DNew*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectJointSliding2DNew; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectJointSliding2DNew = (VisualizationObjectJointSliding2DNew*)pVisualizationObject; }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, HString& errorString) const override;

    //! AUTO:  Get type name of object (without keyword "Object"...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "JointSliding2DNew";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectJointSliding2DNew->GetParameters().markerNumbers = py::cast<std::vector<Index>>(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectJointSliding2DNew->GetParameters().slidingMarkerNumbers = py::cast<std::vector<Index>>(d["slidingMarkerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectJointSliding2DNew->GetParameters().slidingMarkerOffsets = py::cast<std::vector<Real>>(d["slidingMarkerOffsets"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectJointSliding2DNew->GetParameters().nodeNumbers = py::cast<std::vector<Index>>(d["nodeNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (HPyUtils::DictItemExists(d, "activeConnector")) { cObjectJointSliding2DNew->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        HPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (HPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectJointSliding2DNew->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (HPyUtils::DictItemExists(d, "VdrawSize")) { visualizationObjectJointSliding2DNew->GetDrawSize() = py::cast<float>(d["VdrawSize"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (HPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectJointSliding2DNew->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = (std::vector<Index>)cObjectJointSliding2DNew->GetParameters().markerNumbers; //! AUTO: cast variables into python (not needed for standard types) 
        d["slidingMarkerNumbers"] = (std::vector<Index>)cObjectJointSliding2DNew->GetParameters().slidingMarkerNumbers; //! AUTO: cast variables into python (not needed for standard types) 
        d["slidingMarkerOffsets"] = (std::vector<Real>)cObjectJointSliding2DNew->GetParameters().slidingMarkerOffsets; //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumbers"] = (std::vector<Index>)cObjectJointSliding2DNew->GetParameters().nodeNumbers; //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectJointSliding2DNew->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectJointSliding2DNew->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VdrawSize"] = (float)visualizationObjectJointSliding2DNew->GetDrawSize(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectJointSliding2DNew->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const HString& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast((std::vector<Index>)cObjectJointSliding2DNew->GetParameters().markerNumbers);} //! AUTO: get parameter
        else if (parameterName.compare("slidingMarkerNumbers") == 0) { return py::cast((std::vector<Index>)cObjectJointSliding2DNew->GetParameters().slidingMarkerNumbers);} //! AUTO: get parameter
        else if (parameterName.compare("slidingMarkerOffsets") == 0) { return py::cast((std::vector<Real>)cObjectJointSliding2DNew->GetParameters().slidingMarkerOffsets);} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { return py::cast((std::vector<Index>)cObjectJointSliding2DNew->GetParameters().nodeNumbers);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectJointSliding2DNew->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectJointSliding2DNew->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { return py::cast((float)visualizationObjectJointSliding2DNew->GetDrawSize());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectJointSliding2DNew->GetColor());} //! AUTO: get parameter
        else  {PyError(HString("ObjectJointSliding2DNew::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const HString& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { HPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectJointSliding2DNew->GetParameters().markerNumbers = py::cast<std::vector<Index>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("slidingMarkerNumbers") == 0) { cObjectJointSliding2DNew->GetParameters().slidingMarkerNumbers = py::cast<std::vector<Index>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("slidingMarkerOffsets") == 0) { cObjectJointSliding2DNew->GetParameters().slidingMarkerOffsets = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { cObjectJointSliding2DNew->GetParameters().nodeNumbers = py::cast<std::vector<Index>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectJointSliding2DNew->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectJointSliding2DNew->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { visualizationObjectJointSliding2DNew->GetDrawSize() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectJointSliding2DNew->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(HString("ObjectJointSliding2DNew::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};


